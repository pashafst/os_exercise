--- !inherit 01_base.test
--- !python concat compiles
exe = Compilation().compile()
from random import randint
import subprocess

def referenz(max, awk, grep):
    command = """seq 1 {} | awk '{}' | grep '{}' """.format(
        max, awk, grep)
    return subprocess.check_output(command, shell=True)

def test_concat(MAX, AWK, GREP, OUT):
    MAX = str(MAX)
    soll = referenz(MAX, AWK, GREP).decode(errors='replace')
    stdout, stderr = exe.run(args=[MAX, AWK, GREP, OUTPUT])
    if OUT is not "-":
        try:
            with open(OUT,"r") as outfile:
                stdout = outfile.read()
        except Exception as e:
            raise RuntimeError("Failed reading output file %s %s", OUT, e)
    if soll not in stdout:
        logging.info("MAX: {}".format(MAX))
        logging.info("AWK_VORSCHRIFT: {}".format(AWK))
        logging.info("GREP_VORSCHRIFT: {}".format(GREP))
        logging.info("OUTPUT_FILE: {}".format(OUTPUT))
        logging.info("expected stdout:\n{}".format(soll))
        logging.info("actual stdout:\n{}".format(stdout))
        logging.info("actual stderr:\n{}".format(stderr))
        raise RuntimeError('your concat computed not the expected result')


--- !python seq generates numbers
bonus=1
exe.check_requirements(["SEQ"])
MAX = randint(5,10)
AWK = "{print}"
GREP = ""
OUTPUT = "-"

test_concat(MAX, AWK, GREP, OUTPUT)

--- !python awk computes squares
bonus=1
exe.check_requirements(["SEQ", "AWK"])
MAX = randint(5,10)
AWK = "{print $1*$1}"
GREP = ""
OUTPUT = "-"

test_concat(MAX, AWK, GREP, OUTPUT)

--- !python awk computes sum
bonus=1
exe.check_requirements(["SEQ", "AWK"])
MAX = randint(5,10)
AWK = "{a=a+$1} END{print a}"
GREP = ""
OUTPUT = "-"

test_concat(MAX, AWK, GREP, OUTPUT)

--- !python grep filters numbers with two identical digits
bonus=1.5
exe.check_requirements(["SEQ", "AWK", "GREP"])
MAX = randint(50,100)
AWK = "{print}"
GREP = "\(.\)\\1"
OUTPUT = "-"

test_concat(MAX, AWK, GREP, OUTPUT)

--- !python output file
bonus=0.75
exe.check_requirements(["SEQ", "OUTPUT"])
import tempfile
import shutil
tempdir = tempfile.mkdtemp(prefix="concat_test_")

MAX = randint(5,10)
AWK = "{print}"
GREP = ""
OUTPUT = os.path.join(tempdir, "testfile")


try:
    test_concat(MAX, AWK, GREP, OUTPUT)
finally:
    shutil.rmtree(tempdir)


--- !python output file mode
bonus=0.75
exe.check_requirements(["SEQ", "OUTPUT"])
import tempfile
import shutil
from stat import S_IMODE
tempdir = tempfile.mkdtemp(prefix="concat_test_")

MAX = randint(5,10)
AWK = "{print}"
GREP = ""
OUTPUT = os.path.join(tempdir, "testfile")
expected_mode = 0o640


try:
    test_concat(MAX, AWK, GREP, OUTPUT)
    actual_mode = S_IMODE(os.stat(OUTPUT).st_mode)
    if actual_mode != expected_mode:
        logging.info("expected mode: %s", oct(expected_mode))
        logging.info("actual mode: %s", oct(actual_mode))
        raise RuntimeError('your output file has not the expected file mode')
finally:
    shutil.rmtree(tempdir)


--- !python exec syscalls present
malus = 6
exe.check_requirements(["SEQ", "AWK", "GREP"])
MAX = "96"
AWK = "{print}"
GREP = "33"
OUTPUT = "-"

stdout, stderr, syscalls = exe.strace(syscalls="execve", args=[MAX, AWK, GREP, OUTPUT])

seq_found = False
awk_found = False
grep_found = False
for syscall in syscalls:
    if "exec" in syscall:
        if '["seq", "1", "96"]' in syscall:
            seq_found = True
        elif '["awk", "{print}"]' in syscall:
            awk_found = True
        elif '["grep", "33"]' in syscall:
            grep_found = True

if not (seq_found and awk_found and grep_found):
    logging.info("MAX: {}".format(MAX))
    logging.info("AWK_VORSCHRIFT: {}".format(AWK))
    logging.info("GREP_VORSCHRIFT: {}".format(GREP))
    logging.info("OUTPUT_FILE: {}".format(OUTPUT))
    logging.info("actual stdout:\n{}".format(stdout))
    logging.info("actual stderr:\n{}".format(stderr))
    logging.info("actual syscalls:\n" + "".join(syscalls))
    logging.info("seq found: {}".format(seq_found))
    logging.info("awk found: {}".format(awk_found))
    logging.info("grep found: {}".format(grep_found))
    raise RuntimeError('could not find exec syscalls for one of awk, seq, grep')

--- !source pause
#include <unistd.h>

int main() {
  pause();
  return 0;
}


---!python superflous files are closed
try:
    import time
    import psutil
except:
    raise MissingRequirementError("missing psutil module")
malus = 2
exe.check_requirements(["SEQ", "AWK", "GREP"])
MAX = "96"
AWK = "{print}"
GREP = "33"
OUTPUT = str(os.path.join(exe.tmpdir, "outfile"))
pause_exe = Compilation(pause, source_files={"pause.c":{'content':pause, 'main':True}}).compile()

tmp = pause_exe.tmpdir
print(tmp)
px = os.path.join(tmp, "main")
os.symlink(px, os.path.join(tmp, "awk"))
os.symlink(px, os.path.join(tmp, "grep"))
os.symlink(px, os.path.join(tmp, "seq"))

env = {'PATH': tmp}
p = exe.spawn([MAX, AWK, GREP, OUTPUT], env=env)
time.sleep(1)
ps = psutil.Process(p.pid)
num_childs = len(ps.children())
if num_childs != 3:
    for c in ps.children():
        c.kill()
    ps.kill()
    p.communicate()
    raise RuntimeError("Not the expected number of children! Found " + str(num_childs))

wrong_num_fds = None
for c in ps.children():
    if c.num_fds() != 3:
        wrong_num_fds = (str(c.name()), str(c.num_fds()), c.open_files())
for c in ps.children():
    c.kill()
ps.kill()
p.communicate()
if wrong_num_fds:
    raise RuntimeError("child "
                       + wrong_num_fds[0]
                       + " has not the expected number of 3 open files. Found "
                       + wrong_num_fds[1]
                       )
